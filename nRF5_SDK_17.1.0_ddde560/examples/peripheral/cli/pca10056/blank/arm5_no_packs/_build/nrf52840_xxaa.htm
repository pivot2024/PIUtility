<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52840_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52840_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Dec 08 13:54:10 2024
<BR><P>
<H3>Maximum Stack Usage =      20232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_stack_overflow &rArr; cli_example_stack_overflow_force
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[299]">std_n</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[106]">app_util_critical_region_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[104]">app_util_critical_region_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[fd]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[299]">std_n</a><BR>
 <LI><a href="#[234]">nrf_memobj_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[251]">memobj_op</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[269]">nrf_balloc_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[268]">nrf_balloc_alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[187]">log_skip</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">assert_nrf_callback</a><BR>
 <LI><a href="#[41]">app_usbd_event_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">app_usbd_event_execute</a><BR>
 <LI><a href="#[188]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">buffer_add</a><BR>
 <LI><a href="#[e3]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e3]">qsort</a><BR>
 <LI><a href="#[df]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[de]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3b]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[32]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">POWER_CLOCK_IRQHandler</a> from nrfx_power.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[39]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[1b]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">USBD_IRQHandler</a> from nrfx_usbd.o(i.USBD_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[3e]">_sputc</a> from printf2.o(i._sputc) referenced from printf2.o(i.__0sprintf$2)
 <LI><a href="#[4a]">app_timer_cnt_get</a> from app_timer2.o(i.app_timer_cnt_get) referenced from main.o(i.main)
 <LI><a href="#[8e]">app_usbd_core_event_handler</a> from app_usbd_core.o(i.app_usbd_core_event_handler) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[41]">app_usbd_event_execute</a> from app_usbd.o(i.app_usbd_event_execute) referenced 2 times from main.o(.constdata)
 <LI><a href="#[41]">app_usbd_event_execute</a> from app_usbd.o(i.app_usbd_event_execute) referenced from app_usbd.o(i.app_usbd_init)
 <LI><a href="#[40]">app_usbd_event_handler</a> from app_usbd.o(i.app_usbd_event_handler) referenced from app_usbd.o(i.app_usbd_init)
 <LI><a href="#[1]">app_usbd_hfclk_ready</a> from app_usbd.o(i.app_usbd_hfclk_ready) referenced 2 times from app_usbd.o(.data)
 <LI><a href="#[86]">app_usbd_power_event_handler</a> from app_usbd.o(i.app_usbd_power_event_handler) referenced from app_usbd.o(.constdata)
 <LI><a href="#[d1]">backend_name_get</a> from nrf_log_frontend.o(i.backend_name_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[8a]">cdc_acm_consumer</a> from app_usbd_cdc_acm.o(i.cdc_acm_consumer) referenced 2 times from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[87]">cdc_acm_event_handler</a> from app_usbd_cdc_acm.o(i.cdc_acm_event_handler) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[88]">cdc_acm_feed_descriptors</a> from app_usbd_cdc_acm.o(i.cdc_acm_feed_descriptors) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[89]">cdc_acm_req_out_data_cb</a> from app_usbd_cdc_acm.o(i.cdc_acm_req_out_data_cb) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[8b]">cdc_acm_single_shoot_consumer</a> from app_usbd_cdc_acm.o(i.cdc_acm_single_shoot_consumer) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[a6]">cdc_acm_user_ev_handler</a> from nrf_cli_cdc_acm.o(i.cdc_acm_user_ev_handler) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[a9]">cli_cdc_acm_enable</a> from nrf_cli_cdc_acm.o(i.cli_cdc_acm_enable) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[a7]">cli_cdc_acm_init</a> from nrf_cli_cdc_acm.o(i.cli_cdc_acm_init) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[ab]">cli_cdc_acm_read</a> from nrf_cli_cdc_acm.o(i.cli_cdc_acm_read) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[a8]">cli_cdc_acm_uninit</a> from nrf_cli_cdc_acm.o(i.cli_cdc_acm_uninit) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[aa]">cli_cdc_acm_write</a> from nrf_cli_cdc_acm.o(i.cli_cdc_acm_write) referenced from nrf_cli_cdc_acm.o(.constdata)
 <LI><a href="#[ae]">cli_rtt_enable</a> from nrf_cli_rtt.o(i.cli_rtt_enable) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[ac]">cli_rtt_init</a> from nrf_cli_rtt.o(i.cli_rtt_init) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[b0]">cli_rtt_read</a> from nrf_cli_rtt.o(i.cli_rtt_read) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[ad]">cli_rtt_uninit</a> from nrf_cli_rtt.o(i.cli_rtt_uninit) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[af]">cli_rtt_write</a> from nrf_cli_rtt.o(i.cli_rtt_write) referenced from nrf_cli_rtt.o(.constdata)
 <LI><a href="#[4c]">cli_transport_evt_handler</a> from nrf_cli.o(i.cli_transport_evt_handler) referenced from nrf_cli.o(i.nrf_cli_instance_init)
 <LI><a href="#[2]">cli_tx</a> from nrf_log_backend_flash.o(i.cli_tx) referenced 2 times from nrf_log_backend_flash.o(.data)
 <LI><a href="#[b3]">cli_uart_enable</a> from nrf_cli_uart.o(i.cli_uart_enable) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[b1]">cli_uart_init</a> from nrf_cli_uart.o(i.cli_uart_init) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[b5]">cli_uart_read</a> from nrf_cli_uart.o(i.cli_uart_read) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[b2]">cli_uart_uninit</a> from nrf_cli_uart.o(i.cli_uart_uninit) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[b4]">cli_uart_write</a> from nrf_cli_uart.o(i.cli_uart_write) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[4e]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[91]">cmd_app_size</a> from cli_utils_cmds.o(i.cmd_app_size) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[61]">cmd_counter</a> from demo_cli_cmds.o(i.cmd_counter) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5e]">cmd_counter_reset</a> from demo_cli_cmds.o(i.cmd_counter_reset) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5f]">cmd_counter_start</a> from demo_cli_cmds.o(i.cmd_counter_start) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[60]">cmd_counter_stop</a> from demo_cli_cmds.o(i.cmd_counter_stop) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[68]">cmd_dynamic</a> from demo_cli_cmds.o(i.cmd_dynamic) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[64]">cmd_dynamic_add</a> from demo_cli_cmds.o(i.cmd_dynamic_add) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[65]">cmd_dynamic_execute</a> from demo_cli_cmds.o(i.cmd_dynamic_execute) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[66]">cmd_dynamic_remove</a> from demo_cli_cmds.o(i.cmd_dynamic_remove) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[67]">cmd_dynamic_show</a> from demo_cli_cmds.o(i.cmd_dynamic_show) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[90]">cmd_error</a> from cli_utils_cmds.o(i.cmd_error) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[59]">cmd_float_print</a> from demo_cli_cmds.o(i.cmd_float_print) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[92]">cmd_log_msg_error</a> from cli_utils_cmds.o(i.cmd_log_msg_error) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[93]">cmd_log_msg_warning</a> from cli_utils_cmds.o(i.cmd_log_msg_warning) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[58]">cmd_nordic</a> from demo_cli_cmds.o(i.cmd_nordic) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5c]">cmd_print</a> from demo_cli_cmds.o(i.cmd_print) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5a]">cmd_print_all</a> from demo_cli_cmds.o(i.cmd_print_all) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5b]">cmd_print_param</a> from demo_cli_cmds.o(i.cmd_print_param) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[5d]">cmd_python</a> from demo_cli_cmds.o(i.cmd_python) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[8f]">cmd_reset</a> from cli_utils_cmds.o(i.cmd_reset) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[62]">cmd_stack_overflow</a> from demo_cli_cmds.o(i.cmd_stack_overflow) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[85]">compare_func</a> from app_timer2.o(i.compare_func) referenced from app_timer2.o(.constdata)
 <LI><a href="#[63]">dynamic_cmd_get</a> from demo_cli_cmds.o(i.dynamic_cmd_get) referenced from demo_cli_cmds.o(.constdata)
 <LI><a href="#[ba]">erase</a> from nrf_fstorage_nvmc.o(i.erase) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[6e]">ev_dma_epin0_handler</a> from nrfx_usbd.o(i.ev_dma_epin0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[6f]">ev_dma_epin1_handler</a> from nrfx_usbd.o(i.ev_dma_epin1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[70]">ev_dma_epin2_handler</a> from nrfx_usbd.o(i.ev_dma_epin2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[71]">ev_dma_epin3_handler</a> from nrfx_usbd.o(i.ev_dma_epin3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[72]">ev_dma_epin4_handler</a> from nrfx_usbd.o(i.ev_dma_epin4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[73]">ev_dma_epin5_handler</a> from nrfx_usbd.o(i.ev_dma_epin5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[74]">ev_dma_epin6_handler</a> from nrfx_usbd.o(i.ev_dma_epin6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[75]">ev_dma_epin7_handler</a> from nrfx_usbd.o(i.ev_dma_epin7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[77]">ev_dma_epin8_handler</a> from nrfx_usbd.o(i.ev_dma_epin8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[78]">ev_dma_epout0_handler</a> from nrfx_usbd.o(i.ev_dma_epout0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[79]">ev_dma_epout1_handler</a> from nrfx_usbd.o(i.ev_dma_epout1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7a]">ev_dma_epout2_handler</a> from nrfx_usbd.o(i.ev_dma_epout2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7b]">ev_dma_epout3_handler</a> from nrfx_usbd.o(i.ev_dma_epout3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7c]">ev_dma_epout4_handler</a> from nrfx_usbd.o(i.ev_dma_epout4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7d]">ev_dma_epout5_handler</a> from nrfx_usbd.o(i.ev_dma_epout5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7e]">ev_dma_epout6_handler</a> from nrfx_usbd.o(i.ev_dma_epout6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[7f]">ev_dma_epout7_handler</a> from nrfx_usbd.o(i.ev_dma_epout7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[80]">ev_dma_epout8_handler</a> from nrfx_usbd.o(i.ev_dma_epout8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[84]">ev_epdata_handler</a> from nrfx_usbd.o(i.ev_epdata_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[76]">ev_setup_data_handler</a> from nrfx_usbd.o(i.ev_setup_data_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[83]">ev_setup_handler</a> from nrfx_usbd.o(i.ev_setup_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[81]">ev_sof_handler</a> from nrfx_usbd.o(i.ev_sof_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[6d]">ev_started_handler</a> from nrfx_usbd.o(i.ev_started_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[82]">ev_usbevent_handler</a> from nrfx_usbd.o(i.ev_usbevent_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[6c]">ev_usbreset_handler</a> from nrfx_usbd.o(i.ev_usbreset_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[c5]">flashlog_clear_cmd</a> from nrf_log_backend_flash.o(i.flashlog_clear_cmd) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c6]">flashlog_read_cmd</a> from nrf_log_backend_flash.o(i.flashlog_read_cmd) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c7]">flashlog_status_cmd</a> from nrf_log_backend_flash.o(i.flashlog_status_cmd) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[3]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[4]">fstorage_evt_handler</a> from nrf_log_backend_flash.o(i.fstorage_evt_handler) referenced 2 times from nrf_log_backend_flash.o(fs_data)
 <LI><a href="#[b6]">init</a> from nrf_fstorage_nvmc.o(i.init) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[bd]">is_busy</a> from nrf_fstorage_nvmc.o(i.is_busy) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[cd]">log_backend_ctrl</a> from nrf_log_frontend.o(i.log_backend_ctrl) referenced 2 times from nrf_log_frontend.o(.constdata)
 <LI><a href="#[ce]">log_backend_go</a> from nrf_log_frontend.o(i.log_backend_go) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[cf]">log_backend_halt</a> from nrf_log_frontend.o(i.log_backend_halt) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d0]">log_backend_status</a> from nrf_log_frontend.o(i.log_backend_status) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d9]">log_cmd</a> from nrf_log_frontend.o(i.log_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d7]">log_cmd_backends_list</a> from nrf_log_frontend.o(i.log_cmd_backends_list) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d2]">log_config_load_cmd</a> from nrf_log_frontend.o(i.log_config_load_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d3]">log_config_store_cmd</a> from nrf_log_frontend.o(i.log_config_store_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[46]">log_ctrl</a> from nrf_log_frontend.o(i.log_ctrl) referenced from nrf_log_frontend.o(i.log_backend_ctrl)
 <LI><a href="#[47]">log_go</a> from nrf_log_frontend.o(i.log_go) referenced from nrf_log_frontend.o(i.log_backend_go)
 <LI><a href="#[48]">log_halt</a> from nrf_log_frontend.o(i.log_halt) referenced from nrf_log_frontend.o(i.log_backend_halt)
 <LI><a href="#[d4]">log_self_ctrl</a> from nrf_log_frontend.o(i.log_self_ctrl) referenced 2 times from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d5]">log_self_go</a> from nrf_log_frontend.o(i.log_self_go) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d6]">log_self_halt</a> from nrf_log_frontend.o(i.log_self_halt) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[d8]">log_self_status</a> from nrf_log_frontend.o(i.log_self_status) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[49]">log_status</a> from nrf_log_frontend.o(i.log_status) referenced from nrf_log_frontend.o(i.log_backend_status)
 <LI><a href="#[3a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[cb]">module_name_get</a> from nrf_log_frontend.o(i.module_name_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[94]">nrf_balloc_status</a> from nrf_balloc.o(i.nrf_balloc_status) referenced 2 times from nrf_balloc.o(.constdata)
 <LI><a href="#[a2]">nrf_cli_cmd_clear</a> from nrf_cli.o(i.nrf_cli_cmd_clear) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[a3]">nrf_cli_cmd_cli</a> from nrf_cli.o(i.nrf_cli_cmd_cli) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[a0]">nrf_cli_cmd_cli_stats</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9c]">nrf_cli_cmd_cli_stats_reset</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9d]">nrf_cli_cmd_cli_stats_show</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_show) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9e]">nrf_cli_cmd_colors</a> from nrf_cli.o(i.nrf_cli_cmd_colors) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[98]">nrf_cli_cmd_colors_off</a> from nrf_cli.o(i.nrf_cli_cmd_colors_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[99]">nrf_cli_cmd_colors_on</a> from nrf_cli.o(i.nrf_cli_cmd_colors_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9f]">nrf_cli_cmd_echo</a> from nrf_cli.o(i.nrf_cli_cmd_echo) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9a]">nrf_cli_cmd_echo_off</a> from nrf_cli.o(i.nrf_cli_cmd_echo_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[9b]">nrf_cli_cmd_echo_on</a> from nrf_cli.o(i.nrf_cli_cmd_echo_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[a4]">nrf_cli_cmd_history</a> from nrf_cli.o(i.nrf_cli_cmd_history) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[a5]">nrf_cli_cmd_resize</a> from nrf_cli.o(i.nrf_cli_cmd_resize) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[a1]">nrf_cli_cmd_resize_default</a> from nrf_cli.o(i.nrf_cli_cmd_resize_default) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[0]">nrf_cli_print_stream</a> from nrf_cli.o(i.nrf_cli_print_stream) referenced 6 times from main.o(.data)
 <LI><a href="#[97]">nrf_log_backend_cli_flush</a> from nrf_cli.o(i.nrf_log_backend_cli_flush) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[96]">nrf_log_backend_cli_panic_set</a> from nrf_cli.o(i.nrf_log_backend_cli_panic_set) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[95]">nrf_log_backend_cli_put</a> from nrf_cli.o(i.nrf_log_backend_cli_put) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[c4]">nrf_log_backend_crashlog_flush</a> from nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_flush) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c3]">nrf_log_backend_crashlog_panic_set</a> from nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_panic_set) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c2]">nrf_log_backend_crashlog_put</a> from nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_put) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c1]">nrf_log_backend_flashlog_flush</a> from nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_flush) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[c0]">nrf_log_backend_flashlog_panic_set</a> from nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_panic_set) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[bf]">nrf_log_backend_flashlog_put</a> from nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_put) referenced from nrf_log_backend_flash.o(.constdata)
 <LI><a href="#[ca]">nrf_log_backend_uart_flush</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[c9]">nrf_log_backend_uart_panic_set</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[c8]">nrf_log_backend_uart_put</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[be]">nrf_queue_status</a> from nrf_queue.o(i.nrf_queue_status) referenced 2 times from nrf_queue.o(.constdata)
 <LI><a href="#[6a]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[6b]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[56]">nrfx_usbd_consumer</a> from nrfx_usbd.o(i.nrfx_usbd_consumer) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[55]">nrfx_usbd_feeder_flash</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[54]">nrfx_usbd_feeder_flash_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[53]">nrfx_usbd_feeder_ram</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[52]">nrfx_usbd_feeder_ram_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[b8]">read</a> from nrf_fstorage_nvmc.o(i.read) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[bb]">rmap</a> from nrf_fstorage_nvmc.o(i.rmap) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[3f]">rtc_irq</a> from app_timer2.o(i.rtc_irq) referenced from app_timer2.o(i.app_timer_init)
 <LI><a href="#[51]">serial_tx</a> from nrf_log_backend_uart.o(i.serial_tx) referenced from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
 <LI><a href="#[8c]">setup_data_handler_empty</a> from app_usbd_core.o(i.setup_data_handler_empty) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[cc]">severity_lvl_get</a> from nrf_log_frontend.o(i.severity_lvl_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[45]">string_cmp</a> from demo_cli_cmds.o(i.string_cmp) referenced from demo_cli_cmds.o(i.cmd_dynamic_add)
 <LI><a href="#[4d]">string_cmp</a> from nrf_cli.o(i.string_cmp) referenced from nrf_cli.o(i.nrf_cli_instance_init)
 <LI><a href="#[4b]">timer_handle</a> from main.o(i.timer_handle) referenced from main.o(i.main)
 <LI><a href="#[42]">timer_handler</a> from nrf_cli_rtt.o(i.timer_handler) referenced from nrf_cli_rtt.o(i.cli_rtt_enable)
 <LI><a href="#[43]">timer_handler</a> from nrf_cli_uart.o(i.timer_handler) referenced from nrf_cli_uart.o(i.cli_uart_enable)
 <LI><a href="#[44]">uart_event_handler</a> from nrf_cli_uart.o(i.uart_event_handler) referenced from nrf_cli_uart.o(i.cli_uart_init)
 <LI><a href="#[50]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[57]">uart_evt_handler</a> from nrf_log_backend_uart.o(i.uart_evt_handler) referenced from nrf_log_backend_uart.o(i.uart_init)
 <LI><a href="#[4f]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[b7]">uninit</a> from nrf_fstorage_nvmc.o(i.uninit) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[8d]">usbd_descriptor_conf_feeder</a> from app_usbd_core.o(i.usbd_descriptor_conf_feeder) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[69]">usbd_user_ev_handler</a> from main.o(i.usbd_user_ev_handler) referenced from main.o(.constdata)
 <LI><a href="#[bc]">wmap</a> from nrf_fstorage_nvmc.o(i.wmap) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[b9]">write</a> from nrf_fstorage_nvmc.o(i.write) referenced from nrf_fstorage_nvmc.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[301]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[da]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[302]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[303]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[304]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[305]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[306]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[307]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[308]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2af]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[309]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[30a]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[30b]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[30c]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[30d]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[dc]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[de]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[25b]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[df]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[30e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text), UNUSED)

<P><STRONG><a name="[265]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[264]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[262]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[30f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[261]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[267]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[310]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[311]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[312]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[313]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foldcase
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spaces_trim
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_trim
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[223]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foldcase
</UL>

<P><STRONG><a name="[e3]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_instance_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[314]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_remove
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spaces_trim
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_trim
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[315]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_instance_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1df]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
</UL>

<P><STRONG><a name="[221]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatchx
</UL>

<P><STRONG><a name="[1c8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[1b0]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_remove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_execute
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>

<P><STRONG><a name="[111]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[23e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_completion_candidate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[e7]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_float_print
</UL>

<P><STRONG><a name="[31a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[31b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[31c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ed]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[31d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[31e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; nrf_gpio_cfg_sense_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>HardFault_c_handler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HardFault_c_handler &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[fe]"></a>HardFault_process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[f]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_power.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrfx_power_irq_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f1]"></a>SEGGER_RTT_HasData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_HasData))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[101]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
</UL>

<P><STRONG><a name="[103]"></a>SEGGER_RTT_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_Read &rArr; SEGGER_RTT_ReadNoLock &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_read
</UL>

<P><STRONG><a name="[105]"></a>SEGGER_RTT_ReadNoLock</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_ReadNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ReadNoLock &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>

<P><STRONG><a name="[108]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_write
</UL>

<P><STRONG><a name="[109]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 420 bytes, Stack size 12 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nrfx_usbd.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = USBD_IRQHandler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>__0sprintf$2</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[320]"></a>__1sprintf$2</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2), UNUSED)

<P><STRONG><a name="[1dc]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[321]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[322]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[323]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[324]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[dd]"></a>app_error_fault_handler</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[114]"></a>app_error_save_and_stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[4a]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.app_timer_cnt_get))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[119]"></a>app_timer_create</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_timer_create &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
</UL>

<P><STRONG><a name="[11a]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_timer_init &rArr; drv_rtc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>app_timer_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_timer_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
</UL>

<P><STRONG><a name="[122]"></a>app_timer_stop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer2.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_timer_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_uninit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_uninit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_enable
</UL>

<P><STRONG><a name="[123]"></a>app_usbd_all_call</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_usbd_all_call &rArr; class_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[126]"></a>app_usbd_all_iface_deselect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_iface_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_usbd_all_iface_deselect &rArr; app_usbd_iface_deselect &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[128]"></a>app_usbd_all_iface_select_0</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_usbd.o(i.app_usbd_all_iface_select_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_all_iface_select_0 &rArr; app_usbd_iface_select &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[12a]"></a>app_usbd_all_until_served_call</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_until_served_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_usbd_all_until_served_call &rArr; class_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[12b]"></a>app_usbd_cdc_acm_read_any</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_usbd_cdc_acm.o(i.app_usbd_cdc_acm_read_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_cdc_acm_read_any &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
</UL>

<P><STRONG><a name="[12f]"></a>app_usbd_cdc_acm_rx_size</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.app_usbd_cdc_acm_rx_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_cdc_acm_rx_size &rArr; cdc_acm_ctx_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
</UL>

<P><STRONG><a name="[130]"></a>app_usbd_cdc_acm_write</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, app_usbd_cdc_acm.o(i.app_usbd_cdc_acm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cdc_acm_write
</UL>

<P><STRONG><a name="[133]"></a>app_usbd_class_append</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, app_usbd.o(i.app_usbd_class_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_usbd_class_append &rArr; app_usbd_ep_instance_set &rArr; app_usbd_ep_conf_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_initialized
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[2ea]"></a>app_usbd_class_descriptor_find</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, app_usbd.o(i.app_usbd_class_descriptor_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_usbd_class_descriptor_find
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[2e7]"></a>app_usbd_class_first_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_first_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[2e8]"></a>app_usbd_class_rwu_enabled_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_rwu_enabled_check))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[13d]"></a>app_usbd_core_ep0_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_core.o(i.app_usbd_core_ep0_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_usbd_core_ep0_disable &rArr; app_usbd_ep_disable &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[13f]"></a>app_usbd_core_ep0_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_core.o(i.app_usbd_core_ep0_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_usbd_core_ep0_enable &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[148]"></a>app_usbd_core_setup_data_handler_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_usbd_core.o(i.app_usbd_core_setup_data_handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_usbd_core_setup_data_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_last_setup_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[151]"></a>app_usbd_core_setup_rsp</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, app_usbd_core.o(i.app_usbd_core_setup_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_status
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[176]"></a>app_usbd_core_setup_transfer_buff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usbd_core.o(i.app_usbd_core_setup_transfer_buff_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_status
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_prepare_string
</UL>

<P><STRONG><a name="[153]"></a>app_usbd_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = app_usbd_disable &rArr; nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_ev_handler
</UL>

<P><STRONG><a name="[156]"></a>app_usbd_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_enable &rArr; nrfx_usbd_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_ev_handler
</UL>

<P><STRONG><a name="[14f]"></a>app_usbd_ep_call</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_usbd_ep_call &rArr; class_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[13e]"></a>app_usbd_ep_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_usbd_ep_disable &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_disable
</UL>

<P><STRONG><a name="[140]"></a>app_usbd_ep_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_enable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
</UL>

<P><STRONG><a name="[12e]"></a>app_usbd_ep_handled_transfer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_ep_handled_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
</UL>

<P><STRONG><a name="[132]"></a>app_usbd_ep_transfer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_ep_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[41]"></a>app_usbd_event_execute</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_event_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_call
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_state_proc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_requested_hfclk
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_handler_call
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_start
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_force_bus_wakeup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.constdata)
<LI> app_usbd.o(i.app_usbd_init)
<LI> app_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>app_usbd_iface_call</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_iface_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_iface_call &rArr; class_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[127]"></a>app_usbd_iface_deselect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_iface_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_iface_deselect &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
</UL>

<P><STRONG><a name="[14c]"></a>app_usbd_iface_find</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_usbd.o(i.app_usbd_iface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_usbd_iface_find &rArr; app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[129]"></a>app_usbd_iface_select</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_iface_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_usbd_iface_select &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
</UL>

<P><STRONG><a name="[2ec]"></a>app_usbd_iface_selection_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_iface_selection_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
</UL>

<P><STRONG><a name="[16d]"></a>app_usbd_init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, app_usbd.o(i.app_usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_usbd_init &rArr; nrfx_usbd_init &rArr; nrfx_usbd_ep_max_packet_size_set &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init_check
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_uninit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[173]"></a>app_usbd_power_events_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_power_events_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_usbd_power_events_enable &rArr; nrf_drv_power_usbevt_init &rArr; nrfx_power_usbevt_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_initialized
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[177]"></a>app_usbd_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_usbd_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_ev_handler
</UL>

<P><STRONG><a name="[178]"></a>app_usbd_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_usbd_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_ev_handler
</UL>

<P><STRONG><a name="[179]"></a>app_usbd_string_desc_get</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_usbd_string_desc.o(i.app_usbd_string_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_usbd_string_desc_get &rArr; app_usbd_prepare_string &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_prepare_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[104]"></a>app_util_critical_region_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privilege_level_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_lib_region_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>

<P><STRONG><a name="[106]"></a>app_util_critical_region_exit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privilege_level_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_lib_region_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>

<P><STRONG><a name="[17b]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[17c]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[10e]"></a>assert_nrf_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_assert.o(i.assert_nrf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_cmd_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_size_get
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_episoout_size_get
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_status
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_event_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_hfclk_ready
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_uninit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_ram_zlp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_ram
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_consumer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_prepare_string
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cmp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_instance_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_transport_evt_handler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_rtt_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cdc_acm_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cdc_acm_read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_reset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_process
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>

<P><STRONG><a name="[298]"></a>buffer_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[1dd]"></a>cli_example_stack_overflow_force</STRONG> (Thumb, 32 bytes, Stack size 20224 bytes, demo_cli_cmds.o(i.cli_example_stack_overflow_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 20224<LI>Call Chain = cli_example_stack_overflow_force
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stack_overflow
</UL>

<P><STRONG><a name="[160]"></a>current_int_priority_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_util_platform.o(i.current_int_priority_get))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1e8]"></a>drv_rtc_compare_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_rtc_compare_disable &rArr; evt_disable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[2d3]"></a>drv_rtc_compare_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
</UL>

<P><STRONG><a name="[1ea]"></a>drv_rtc_compare_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_rtc_compare_pending &rArr; evt_pending &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[11e]"></a>drv_rtc_compare_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_rtc.o(i.drv_rtc_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = drv_rtc_compare_set &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[118]"></a>drv_rtc_counter_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>

<P><STRONG><a name="[11c]"></a>drv_rtc_init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, drv_rtc.o(i.drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = drv_rtc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[2f4]"></a>drv_rtc_irq_trigger</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_irq_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[11d]"></a>drv_rtc_overflow_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_rtc_overflow_enable &rArr; evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1ee]"></a>drv_rtc_overflow_pending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_rtc_overflow_pending &rArr; evt_pending &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[1ef]"></a>drv_rtc_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drv_rtc_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[1f0]"></a>drv_rtc_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drv_rtc_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[1f1]"></a>drv_rtc_windowed_compare_set</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, drv_rtc.o(i.drv_rtc_windowed_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = drv_rtc_windowed_compare_set &rArr; evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[208]"></a>fds_init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>fds_record_close</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
</UL>

<P><STRONG><a name="[210]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_store
</UL>

<P><STRONG><a name="[211]"></a>fds_record_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
</UL>

<P><STRONG><a name="[212]"></a>fds_record_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_store
</UL>

<P><STRONG><a name="[214]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_store
</UL>

<P><STRONG><a name="[1e0]"></a>fnmatch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fnmatch.o(i.fnmatch))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
</UL>

<P><STRONG><a name="[2ed]"></a>log_pending_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_pending_hook))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[3a]"></a>main</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = main &rArr; nrf_cli_process &rArr; cli_state_collect &rArr; cli_execute &rArr; commands_expand &rArr; command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_lib_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11b]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[257]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>

<P><STRONG><a name="[259]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[25a]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[25c]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
</UL>

<P><STRONG><a name="[1f9]"></a>nrf_atomic_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>

<P><STRONG><a name="[141]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_put
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[247]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[1f7]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flashlog_put
</UL>

<P><STRONG><a name="[186]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[25d]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>

<P><STRONG><a name="[263]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[25e]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[260]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[1e7]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[25f]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[266]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[268]"></a>nrf_balloc_alloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = nrf_balloc_alloc &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[269]"></a>nrf_balloc_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[26a]"></a>nrf_balloc_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[a0]"></a>nrf_cli_cmd_cli_stats</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = nrf_cli_cmd_cli_stats &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>nrf_cli_cmd_cli_stats_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nrf_cli_cmd_cli_stats_reset &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>nrf_cli_cmd_cli_stats_show</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = nrf_cli_cmd_cli_stats_show &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>nrf_cli_fprintf</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, nrf_cli.o(i.nrf_cli_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_bgcolor_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_python
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print_param
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print_all
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_nordic
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_float_print
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_remove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_execute
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter_stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_print
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_status_cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_read_cmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
</UL>

<P><STRONG><a name="[1da]"></a>nrf_cli_help_print</STRONG> (Thumb, 584 bytes, Stack size 72 bytes, nrf_cli.o(i.nrf_cli_help_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stack_overflow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_nordic
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_remove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_execute
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_status_cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_read_cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_clear_cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
</UL>

<P><STRONG><a name="[1b5]"></a>nrf_cli_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_cli_init &rArr; nrf_cli_instance_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>

<P><STRONG><a name="[0]"></a>nrf_cli_print_stream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_cli.o(i.nrf_cli_print_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_cli_print_stream &rArr; cli_write &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.data)
<LI> main.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[250]"></a>nrf_cli_process</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = nrf_cli_process &rArr; cli_state_collect &rArr; cli_execute &rArr; commands_expand &rArr; command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_flag_echo_is_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>nrf_cli_start</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = nrf_cli_start &rArr; cli_state_set &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_bgcolor_set
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_set
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start
</UL>

<P><STRONG><a name="[167]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_drv_clock_hfclk_release &rArr; nrfx_clock_hfclk_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[275]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; nrfx_clock_hfclk_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[24b]"></a>nrf_drv_clock_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>nrf_drv_clock_init_check</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init_check))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[24c]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; nrfx_clock_lfclk_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>nrf_drv_power_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_drv_power_init &rArr; nrfx_power_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[174]"></a>nrf_drv_power_usbevt_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_drv_power_usbevt_init &rArr; nrfx_power_usbevt_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_enable
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
</UL>

<P><STRONG><a name="[27d]"></a>nrf_drv_power_usbevt_uninit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_power_usbevt_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_uninit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[1cd]"></a>nrf_drv_uart_init</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[195]"></a>nrf_fprintf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_bgcolor_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[189]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[270]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[22f]"></a>nrf_fstorage_erase</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_erase
</UL>

<P><STRONG><a name="[20a]"></a>nrf_fstorage_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_panic_set
</UL>

<P><STRONG><a name="[295]"></a>nrf_fstorage_rmap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_fstorage.o(i.nrf_fstorage_rmap))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_next_entry_get
</UL>

<P><STRONG><a name="[230]"></a>nrf_fstorage_write</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_panic_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>

<P><STRONG><a name="[219]"></a>nrf_log_backend_add</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_backend_add &rArr; nrf_log_module_filter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
</UL>

<P><STRONG><a name="[c4]"></a>nrf_log_backend_crashlog_flush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_log_backend_crashlog_flush &rArr; queue_element_drop &rArr; nrf_queue_generic_pop &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_element_drop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>nrf_log_backend_crashlog_panic_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_log_backend_crashlog_panic_set &rArr; log_msg_queue_process &rArr; msg_to_buf &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>nrf_log_backend_crashlog_put</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_crashlog_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_log_backend_crashlog_put &rArr; message_enqueue &rArr; nrf_queue_push &rArr; nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_enqueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>nrf_log_backend_flash_erase</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_backend_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_clear_cmd
</UL>

<P><STRONG><a name="[218]"></a>nrf_log_backend_flash_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_backend_flash_init &rArr; nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_next_entry_get
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_init
</UL>

<P><STRONG><a name="[21a]"></a>nrf_log_backend_flash_next_entry_get</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flash_next_entry_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_flash_next_entry_get
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_rmap
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate_align_length
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_read_cmd
</UL>

<P><STRONG><a name="[c1]"></a>nrf_log_backend_flashlog_flush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_log_backend_flashlog_flush &rArr; queue_element_drop &rArr; nrf_queue_generic_pop &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_element_drop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>nrf_log_backend_flashlog_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>nrf_log_backend_flashlog_put</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_backend_flash.o(i.nrf_log_backend_flashlog_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_log_backend_flashlog_put &rArr; message_enqueue &rArr; nrf_queue_push &rArr; nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_enqueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_put
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[241]"></a>nrf_log_config_load</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_log_config_load &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
</UL>

<P><STRONG><a name="[242]"></a>nrf_log_config_store</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_config_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_log_config_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
</UL>

<P><STRONG><a name="[f9]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[fd]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[fa]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_store
</UL>

<P><STRONG><a name="[115]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
</UL>

<P><STRONG><a name="[fc]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[fb]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[117]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_process
</UL>

<P><STRONG><a name="[24a]"></a>nrf_log_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_str_formatter_timestamp_freq_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[249]"></a>nrf_log_module_filter_get</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
</UL>

<P><STRONG><a name="[254]"></a>nrf_log_module_filter_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_module_filter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
</UL>

<P><STRONG><a name="[244]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_name_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[f8]"></a>nrf_log_panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[1ba]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_process
</UL>

<P><STRONG><a name="[29c]"></a>nrf_log_str_formatter_timestamp_freq_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.nrf_log_str_formatter_timestamp_freq_set))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[237]"></a>nrf_memobj_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
</UL>

<P><STRONG><a name="[236]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_oldest_remove
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[293]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flashlog_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_put
</UL>

<P><STRONG><a name="[273]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_instance_init
</UL>

<P><STRONG><a name="[1b8]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_element_drop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_enqueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_evt_handler
</UL>

<P><STRONG><a name="[1b9]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_oldest_remove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_add
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_to_buf
</UL>

<P><STRONG><a name="[234]"></a>nrf_memobj_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = nrf_memobj_write &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_oldest_remove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_add
</UL>

<P><STRONG><a name="[24e]"></a>nrf_mpu_lib_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_mpu_lib.o(i.nrf_mpu_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_mpu_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>nrf_mpu_lib_region_create</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_mpu_lib.o(i.nrf_mpu_lib_region_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_mpu_lib_region_create &rArr; app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
</UL>

<P><STRONG><a name="[1f8]"></a>nrf_nvmc_page_erase</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrf_nvmc.o(i.nrf_nvmc_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[2fd]"></a>nrf_nvmc_write_words</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_nvmc.o(i.nrf_nvmc_write_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_nvmc_write_words
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[1c0]"></a>nrf_pwr_mgmt_feed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_feed))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[29e]"></a>nrf_queue_available_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_available_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[1b7]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_queue_generic_pop &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_element_drop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_enqueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>

<P><STRONG><a name="[192]"></a>nrf_queue_in</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_queue_in &rArr; queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
</UL>

<P><STRONG><a name="[191]"></a>nrf_queue_is_empty</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_is_empty &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[2a2]"></a>nrf_queue_is_full</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[26d]"></a>nrf_queue_max_utilization_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_max_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_max_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
</UL>

<P><STRONG><a name="[26c]"></a>nrf_queue_max_utilization_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_max_utilization_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_max_utilization_reset &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
</UL>

<P><STRONG><a name="[1a4]"></a>nrf_queue_out</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_queue_out &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cdc_acm_read
</UL>

<P><STRONG><a name="[253]"></a>nrf_queue_push</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_queue_push &rArr; nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_enqueue
</UL>

<P><STRONG><a name="[29f]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
</UL>

<P><STRONG><a name="[2a5]"></a>nrf_ringbuf_alloc</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_alloc &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[1d0]"></a>nrf_ringbuf_cpy_get</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_cpy_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_read
</UL>

<P><STRONG><a name="[1d1]"></a>nrf_ringbuf_cpy_put</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_cpy_put &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_ringbuf_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_ringbuf.o(i.nrf_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ringbuf_free &rArr; nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_ringbuf_get</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ringbuf_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[1cf]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
</UL>

<P><STRONG><a name="[2a6]"></a>nrf_ringbuf_put</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_ringbuf.o(i.nrf_ringbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_ringbuf_put &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[2a7]"></a>nrf_sortlist_add</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_sortlist.o(i.nrf_sortlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_sortlist_add &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2a8]"></a>nrf_sortlist_peek</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_sortlist.o(i.nrf_sortlist_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_sortlist_peek &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2a9]"></a>nrf_sortlist_pop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_sortlist.o(i.nrf_sortlist_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_sortlist_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>

<P><STRONG><a name="[2aa]"></a>nrf_sortlist_remove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_sortlist.o(i.nrf_sortlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_sortlist_remove &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[24f]"></a>nrf_stack_guard_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, nrf_stack_guard.o(i.nrf_stack_guard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_stack_guard_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mpu_lib_region_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ab]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[116]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_guard_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[200]"></a>nrfx_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_atomic.o(i.nrfx_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
</UL>

<P><STRONG><a name="[279]"></a>nrfx_clock_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_clock_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[277]"></a>nrfx_clock_hfclk_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_clock_hfclk_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[274]"></a>nrfx_clock_hfclk_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_clock_hfclk_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[278]"></a>nrfx_clock_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_clock_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[100]"></a>nrfx_clock_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrfx_clock.o(i.nrfx_clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_clock_irq_handler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>nrfx_clock_lfclk_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_clock_lfclk_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[27c]"></a>nrfx_power_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_power.o(i.nrfx_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_power_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
</UL>

<P><STRONG><a name="[ff]"></a>nrfx_power_irq_handler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, nrfx_power.o(i.nrfx_power_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_power_irq_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[280]"></a>nrfx_power_usbevt_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[27f]"></a>nrfx_power_usbevt_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[27e]"></a>nrfx_power_usbevt_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_power.o(i.nrfx_power_usbevt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_power_usbevt_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[281]"></a>nrfx_power_usbevt_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[2b5]"></a>nrfx_prs_acquire</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_prs_acquire &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[2b7]"></a>nrfx_prs_release</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_prs_release &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[6a]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>nrfx_uart_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[2b9]"></a>nrfx_uart_rx</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_uart_rx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[2f3]"></a>nrfx_uart_rx_abort</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_rx_abort))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[285]"></a>nrfx_uart_tx</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_uart_tx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[1d3]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[287]"></a>nrfx_uart_uninit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfx_uart_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[6b]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>nrfx_uarte_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[2bf]"></a>nrfx_uarte_rx</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_uarte_rx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[2f2]"></a>nrfx_uarte_rx_abort</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_rx_abort))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[284]"></a>nrfx_uarte_tx</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_uarte_tx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[1d2]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[286]"></a>nrfx_uarte_uninit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[2ef]"></a>nrfx_usbd_active_irq_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_active_irq_config))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[56]"></a>nrfx_usbd_consumer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_consumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_consumer &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[155]"></a>nrfx_usbd_disable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
</UL>

<P><STRONG><a name="[157]"></a>nrfx_usbd_enable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_enable
</UL>

<P><STRONG><a name="[2c7]"></a>nrfx_usbd_ep_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfx_usbd_ep_abort &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[159]"></a>nrfx_usbd_ep_disable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_disable
</UL>

<P><STRONG><a name="[15a]"></a>nrfx_usbd_ep_dtoggle_clear</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_dtoggle_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_dtoggle_clear &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[15c]"></a>nrfx_usbd_ep_enable</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[15d]"></a>nrfx_usbd_ep_enable_check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_enable_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_enable_check &rArr; nrf_usbd_ep_enable_check &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[15e]"></a>nrfx_usbd_ep_handled_transfer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_handled_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rise
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[152]"></a>nrfx_usbd_ep_max_packet_size_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_max_packet_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_ep_max_packet_size_get &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
</UL>

<P><STRONG><a name="[2cb]"></a>nrfx_usbd_ep_max_packet_size_set</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_max_packet_size_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_usbd_ep_max_packet_size_set &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
</UL>

<P><STRONG><a name="[16b]"></a>nrfx_usbd_ep_stall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_stall &rArr; ep_to_hal &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
</UL>

<P><STRONG><a name="[2cc]"></a>nrfx_usbd_ep_stall_check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_stall_check &rArr; ep_to_hal &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
</UL>

<P><STRONG><a name="[15b]"></a>nrfx_usbd_ep_stall_clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_usbd_ep_stall_clear &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[15f]"></a>nrfx_usbd_ep_transfer</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rise
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>

<P><STRONG><a name="[2ce]"></a>nrfx_usbd_epout_size_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_epout_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_size_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_to_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[2fa]"></a>nrfx_usbd_feeder_buffer_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_buffer_get))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
</UL>

<P><STRONG><a name="[55]"></a>nrfx_usbd_feeder_flash</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_feeder_flash &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[54]"></a>nrfx_usbd_feeder_flash_zlp</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_feeder_flash_zlp &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[53]"></a>nrfx_usbd_feeder_ram</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_feeder_ram &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[52]"></a>nrfx_usbd_feeder_ram_zlp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_feeder_ram_zlp &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[16a]"></a>nrfx_usbd_force_bus_wakeup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_force_bus_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[16f]"></a>nrfx_usbd_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfx_usbd_init &rArr; nrfx_usbd_ep_max_packet_size_set &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[134]"></a>nrfx_usbd_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_ev_handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
</UL>

<P><STRONG><a name="[135]"></a>nrfx_usbd_is_initialized</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_is_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
</UL>

<P><STRONG><a name="[154]"></a>nrfx_usbd_is_started</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_is_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_is_started
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_IS_ENABLED
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
</UL>

<P><STRONG><a name="[149]"></a>nrfx_usbd_last_setup_dir_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_last_setup_dir_get))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
</UL>

<P><STRONG><a name="[147]"></a>nrfx_usbd_setup_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_clear))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[146]"></a>nrfx_usbd_setup_data_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_data_clear))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[14a]"></a>nrfx_usbd_setup_get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_get))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[144]"></a>nrfx_usbd_setup_stall</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_stall))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[163]"></a>nrfx_usbd_start</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[164]"></a>nrfx_usbd_stop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_IS_ENABLED
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[168]"></a>nrfx_usbd_suspend</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrfx_usbd_suspend &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[2f0]"></a>nrfx_usbd_suspend_irq_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_suspend_irq_config))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[2c9]"></a>nrfx_usbd_transfer_out_drop</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_transfer_out_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[172]"></a>nrfx_usbd_uninit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfx_usbd_uninit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[169]"></a>nrfx_usbd_wakeup_req</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_wakeup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_wakeup_req &rArr; app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_171
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_lowpower_check
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[10d]"></a>nvmc_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_nrf52.o(i.nvmc_config))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[17a]"></a>privilege_level_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_util_platform.o(i.privilege_level_get))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>cmd_counter</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cmd_counter &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>cmd_counter_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, demo_cli_cmds.o(i.cmd_counter_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cmd_counter_reset &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>cmd_counter_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, demo_cli_cmds.o(i.cmd_counter_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cmd_counter_start &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>cmd_counter_stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, demo_cli_cmds.o(i.cmd_counter_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cmd_counter_stop &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>cmd_dynamic</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, demo_cli_cmds.o(i.cmd_dynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = cmd_dynamic &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>cmd_dynamic_add</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, demo_cli_cmds.o(i.cmd_dynamic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = cmd_dynamic_add &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>cmd_dynamic_execute</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, demo_cli_cmds.o(i.cmd_dynamic_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = cmd_dynamic_execute &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>cmd_dynamic_remove</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_dynamic_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cmd_dynamic_remove &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>cmd_dynamic_show</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_dynamic_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cmd_dynamic_show &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>cmd_float_print</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, demo_cli_cmds.o(i.cmd_float_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = cmd_float_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>cmd_nordic</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, demo_cli_cmds.o(i.cmd_nordic))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = cmd_nordic &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>cmd_print</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cmd_print &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>cmd_print_all</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_print_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cmd_print_all &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>cmd_print_param</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, demo_cli_cmds.o(i.cmd_print_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cmd_print_param &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>cmd_python</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, demo_cli_cmds.o(i.cmd_python))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cmd_python &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>cmd_stack_overflow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, demo_cli_cmds.o(i.cmd_stack_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20232<LI>Call Chain = cmd_stack_overflow &rArr; cli_example_stack_overflow_force
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_example_stack_overflow_force
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>dynamic_cmd_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, demo_cli_cmds.o(i.dynamic_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dynamic_cmd_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>nrf_cli_help_requested</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, demo_cli_cmds.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stack_overflow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_nordic
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_remove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_execute
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dynamic
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_counter
</UL>

<P><STRONG><a name="[45]"></a>string_cmp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, demo_cli_cmds.o(i.string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = string_cmp &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_cli_cmds.o(i.cmd_dynamic_add)
</UL>
<P><STRONG><a name="[1b4]"></a>cli_init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, main.o(i.cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = cli_init &rArr; nrf_cli_init &rArr; nrf_cli_instance_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>cli_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.cli_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = cli_start &rArr; nrf_cli_start &rArr; cli_state_set &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>flashlog_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.flashlog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = flashlog_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>timer_handle</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = timer_handle &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[24d]"></a>usbd_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = usbd_init &rArr; app_usbd_init &rArr; nrfx_usbd_init &rArr; nrfx_usbd_ep_max_packet_size_set &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>usbd_user_ev_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.usbd_user_ev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = usbd_user_ev_handler &rArr; app_usbd_disable &rArr; nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_stop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[4e]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[276]"></a>item_enqueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[27a]"></a>nrf_wdt_started</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[50]"></a>uart_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[4f]"></a>uarte_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[2b2]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[2b1]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[2b0]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[2db]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[2d9]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[290]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_cfg_sense_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[f6]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[291]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
</UL>

<P><STRONG><a name="[292]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_present_check))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>

<P><STRONG><a name="[f5]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>port_event_handle</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = port_event_handle &rArr; nrf_gpio_cfg_sense_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2da]"></a>port_handler_polarity_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[2b4]"></a>nrf_power_event_get_and_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_power.o(i.nrf_power_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>

<P><STRONG><a name="[2b3]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
</UL>

<P><STRONG><a name="[2b6]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[17d]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[23a]"></a>interrupts_enable</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = interrupts_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[28a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[28e]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[180]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[17f]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[28b]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[17e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_gpio_pin_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[23b]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2f5]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2bc]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2f6]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2ba]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[2bd]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2f7]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2b8]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[181]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[23c]"></a>interrupts_enable</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = interrupts_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[28c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[28f]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[184]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[183]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[28d]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[182]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_gpio_pin_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2c1]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[23d]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2c0]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[2f8]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[2f9]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[2be]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[2cf]"></a>_NRFX_IRQ_IS_ENABLED</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_usbd.o(i._NRFX_IRQ_IS_ENABLED))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
</UL>

<P><STRONG><a name="[202]"></a>bit2ep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.bit2ep))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
</UL>

<P><STRONG><a name="[1f4]"></a>ep2bit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ep2bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_sof_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[1f5]"></a>ep_state_access</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ep_state_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[1f6]"></a>ep_to_hal</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ep_to_hal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ep_to_hal &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_epout_size_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>

<P><STRONG><a name="[6e]"></a>ev_dma_epin0_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ev_dma_epin0_handler &rArr; nrf_usbd_ep0in_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ev_dma_epin1_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin1_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ev_dma_epin2_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin2_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ev_dma_epin3_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin3_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ev_dma_epin4_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin4_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ev_dma_epin5_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin5_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>ev_dma_epin6_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin6_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ev_dma_epin7_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin7_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ev_dma_epin8_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epin8_handler &rArr; nrf_usbd_epiniso_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ev_dma_epout0_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_dma_epout0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epout0_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ev_dma_epout1_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout1_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ev_dma_epout2_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout2_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ev_dma_epout3_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout3_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ev_dma_epout4_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout4_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ev_dma_epout5_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout5_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ev_dma_epout6_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout6_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ev_dma_epout7_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_dma_epout7_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ev_dma_epout8_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_dma_epout8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_dma_epout8_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ev_epdata_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_epdata_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ev_epdata_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ev_setup_data_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_setup_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ev_setup_data_handler &rArr; usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ev_setup_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ev_setup_handler &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ev_sof_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ev_sof_handler &rArr; nrf_usbd_episoout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_episoout_size_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ev_started_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_started_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ev_usbevent_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_usbevent_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ev_usbevent_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_lowpower_check
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ev_usbreset_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_usbreset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ev_usbreset_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>nrf_usbd_ep0in_dma_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_ep0in_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_usbd_ep0in_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin0_handler
</UL>

<P><STRONG><a name="[2fc]"></a>nrf_usbd_ep_easydma_set</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, nrfx_usbd.o(i.nrf_usbd_ep_easydma_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_usbd_ep_easydma_set
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[2ac]"></a>nrf_usbd_ep_enable_check</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_ep_enable_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_usbd_ep_enable_check &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_usbd_epin_dma_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epin_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin7_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin6_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin5_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin4_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin3_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin2_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin1_handler
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_usbd_epiniso_dma_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epiniso_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_usbd_epiniso_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
</UL>

<P><STRONG><a name="[205]"></a>nrf_usbd_episoout_size_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_episoout_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_usbd_episoout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_sof_handler
</UL>

<P><STRONG><a name="[201]"></a>nrf_usbd_epout_dma_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epout_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout7_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout6_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout5_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout4_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout3_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout2_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout1_handler
</UL>

<P><STRONG><a name="[2ad]"></a>nrf_usbd_epout_size_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epout_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_epout_size_get
</UL>

<P><STRONG><a name="[2ae]"></a>nrf_usbd_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
</UL>

<P><STRONG><a name="[10f]"></a>nrf_usbd_event_get_and_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_usbd_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[206]"></a>nrf_usbd_eventcause_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_eventcause_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[207]"></a>nrf_usbd_lowpower_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_lowpower_check))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
</UL>

<P><STRONG><a name="[1ff]"></a>nrf_usbd_task_trigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
</UL>

<P><STRONG><a name="[2c2]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_ram_zlp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_ram
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_consumer
</UL>

<P><STRONG><a name="[2cd]"></a>nrfx_usbd_ep_to_endevent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_endevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_to_endevent &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[2c8]"></a>nrfx_usbd_ep_to_int</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrfx_usbd_ep_to_int &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>

<P><STRONG><a name="[2d1]"></a>nrfx_usbd_errata_171</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_171))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
</UL>

<P><STRONG><a name="[2c4]"></a>nrfx_usbd_errata_187</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_187))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[2fb]"></a>nrfx_usbd_errata_199</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_199))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>

<P><STRONG><a name="[1fe]"></a>usbd_dma_pending_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_dma_pending_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_dma_pending_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_199
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[110]"></a>usbd_dmareq_process</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, nrfx_usbd.o(i.usbd_dmareq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = usbd_dmareq_process &rArr; nrfx_usbd_epout_size_get &rArr; nrf_usbd_epout_size_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_199
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_easydma_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_epout_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[2c3]"></a>usbd_enable</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrfx_usbd.o(i.usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_171
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[204]"></a>usbd_ep_abort</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, nrfx_usbd.o(i.usbd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_abort
</UL>

<P><STRONG><a name="[2d0]"></a>usbd_ep_abort_all</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_abort_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; ep2bit &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>

<P><STRONG><a name="[203]"></a>usbd_ep_data_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
</UL>

<P><STRONG><a name="[2c5]"></a>usbd_errata_187_211_begin</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_errata_187_211_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_errata_187_211_begin &rArr; app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[2c6]"></a>usbd_errata_187_211_end</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_errata_187_211_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_errata_187_211_end &rArr; app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[2ca]"></a>usbd_int_rise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.usbd_int_rise))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[85]"></a>compare_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer2.o(i.compare_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>get_now</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_timer2.o(i.get_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_now
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[2d2]"></a>on_compare_evt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, app_timer2.o(i.on_compare_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = on_compare_evt &rArr; timer_expire &rArr; nrf_sortlist_add &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_get
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3f]"></a>rtc_irq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_timer2.o(i.rtc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rtc_irq &rArr; rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(i.app_timer_init)
</UL>
<P><STRONG><a name="[2e4]"></a>rtc_schedule</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, app_timer2.o(i.rtc_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2e3]"></a>rtc_update</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, app_timer2.o(i.rtc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[2e5]"></a>sortlist_pop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.sortlist_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sortlist_pop &rArr; nrf_sortlist_pop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2d4]"></a>timer_expire</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, app_timer2.o(i.timer_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = timer_expire &rArr; nrf_sortlist_add &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
</UL>

<P><STRONG><a name="[2e2]"></a>timer_req_process</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, app_timer2.o(i.timer_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = timer_req_process &rArr; nrf_sortlist_remove &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[121]"></a>timer_req_schedule</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[137]"></a>app_usbd_class_iface_ep_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_class_iface_ep_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_class_iface_ep_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
</UL>

<P><STRONG><a name="[138]"></a>app_usbd_class_iface_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_class_iface_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_find
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
</UL>

<P><STRONG><a name="[125]"></a>app_usbd_class_next_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_class_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_usbd_class_next_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_find
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_until_served_call
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_call
</UL>

<P><STRONG><a name="[161]"></a>app_usbd_core_handler_call</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_core_handler_call))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[158]"></a>app_usbd_ep_conf_access</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_conf_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_usbd_ep_conf_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_call
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_get
</UL>

<P><STRONG><a name="[136]"></a>app_usbd_ep_instance_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_instance_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_ep_instance_get &rArr; app_usbd_ep_conf_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
</UL>

<P><STRONG><a name="[139]"></a>app_usbd_ep_instance_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_ep_instance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_usbd_ep_instance_set &rArr; app_usbd_ep_conf_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
</UL>

<P><STRONG><a name="[16c]"></a>app_usbd_event_add</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_event_add))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_stop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_event_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_hfclk_ready
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_handler
</UL>

<P><STRONG><a name="[40]"></a>app_usbd_event_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_event_handler))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(i.app_usbd_init)
</UL>
<P><STRONG><a name="[1]"></a>app_usbd_hfclk_ready</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_hfclk_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_usbd_hfclk_ready &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>app_usbd_power_event_handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_power_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = app_usbd_power_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>app_usbd_sustate_with_requested_hfclk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_sustate_with_requested_hfclk))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[2ee]"></a>app_usbd_sustate_with_running_hfclk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_sustate_with_running_hfclk))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[124]"></a>class_event_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_usbd.o(i.class_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = class_event_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_call
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_call
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_until_served_call
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_call
</UL>

<P><STRONG><a name="[165]"></a>sustate_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_usbd.o(i.sustate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sustate_set &rArr; nrf_drv_clock_hfclk_request &rArr; nrfx_clock_hfclk_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_running_hfclk
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_requested_hfclk
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend_irq_config
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_active_irq_config
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[162]"></a>user_event_state_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd.o(i.user_event_state_proc))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[13a]"></a>app_usbd_class_iface_ep_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd_cdc_acm.o(i.app_usbd_class_iface_ep_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_class_iface_ep_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
</UL>

<P><STRONG><a name="[13b]"></a>app_usbd_class_iface_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_usbd_cdc_acm.o(i.app_usbd_class_iface_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
</UL>

<P><STRONG><a name="[8a]"></a>cdc_acm_consumer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_consumer))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>cdc_acm_ctx_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.cdc_acm_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cdc_acm_ctx_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_rx_size
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_reset_port
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_out_data_cb
</UL>

<P><STRONG><a name="[87]"></a>cdc_acm_event_handler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_usbd_cdc_acm.o(i.cdc_acm_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cdc_acm_event_handler &rArr; setup_event_handler &rArr; setup_req_class_out &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_reset_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>cdc_acm_feed_descriptors</STRONG> (Thumb, 1720 bytes, Stack size 56 bytes, app_usbd_cdc_acm.o(i.cdc_acm_feed_descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cdc_acm_feed_descriptors &rArr; app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>cdc_acm_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.cdc_acm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cdc_acm_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_reset_port
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
</UL>

<P><STRONG><a name="[89]"></a>cdc_acm_req_out_data_cb</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.cdc_acm_req_out_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cdc_acm_req_out_data_cb &rArr; cdc_acm_ctx_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>cdc_acm_reset_port</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.cdc_acm_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cdc_acm_reset_port &rArr; cdc_acm_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[18d]"></a>cdc_acm_rx_block_finished</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, app_usbd_cdc_acm.o(i.cdc_acm_rx_block_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cdc_acm_rx_block_finished &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[8b]"></a>cdc_acm_single_shoot_consumer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_single_shoot_consumer))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>comm_ep_in_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.comm_ep_in_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = comm_ep_in_addr_get &rArr; app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[131]"></a>data_ep_in_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.data_ep_in_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = data_ep_in_addr_get &rArr; app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[12d]"></a>data_ep_out_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.data_ep_out_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = data_ep_out_addr_get &rArr; app_usbd_class_iface_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
</UL>

<P><STRONG><a name="[18b]"></a>setup_event_handler</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, app_usbd_cdc_acm.o(i.setup_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = setup_event_handler &rArr; setup_req_class_out &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_descriptor_find
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[2eb]"></a>setup_req_class_out</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, app_usbd_cdc_acm.o(i.setup_req_class_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = setup_req_class_out &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_ctx_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[18e]"></a>user_event_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_usbd_cdc_acm.o(i.user_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = user_event_handler &rArr; cdc_acm_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[13c]"></a>app_usbd_class_next_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_usbd_core.o(i.app_usbd_class_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_usbd_class_next_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[8e]"></a>app_usbd_core_event_handler</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, app_usbd_core.o(i.app_usbd_core_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_usbd_core_event_handler &rArr; app_usbd_core_setup_req_handler &rArr; setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_ep0_handler_check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>app_usbd_core_setup_req_handler</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, app_usbd_core.o(i.app_usbd_core_setup_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = app_usbd_core_setup_req_handler &rArr; setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_ep0_handler_check
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_find
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_call
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_call
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_until_served_call
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_last_setup_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[8c]"></a>setup_data_handler_empty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd_core.o(i.setup_data_handler_empty))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[2e6]"></a>setup_device_req_get_descriptor</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, app_usbd_core.o(i.setup_device_req_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_rwu_enabled_check
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_first_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_string_desc_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[2e9]"></a>setup_device_req_get_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_usbd_core.o(i.setup_device_req_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = setup_device_req_get_status &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[14b]"></a>setup_device_req_std_handler</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, app_usbd_core.o(i.setup_device_req_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_status
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_rwu_enabled_check
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[150]"></a>setup_endpoint_req_std</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_usbd_core.o(i.setup_endpoint_req_std))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = setup_endpoint_req_std &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[14e]"></a>setup_interface_req_std_handle</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_usbd_core.o(i.setup_interface_req_std_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = setup_interface_req_std_handle &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_selection_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[145]"></a>usb_core_ep0_handler_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd_core.o(i.usb_core_ep0_handler_check))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[142]"></a>usbd_core_state_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd_core.o(i.usbd_core_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = usbd_core_state_set &rArr; app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[8d]"></a>usbd_descriptor_conf_feeder</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, app_usbd_core.o(i.usbd_descriptor_conf_feeder))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = usbd_descriptor_conf_feeder &rArr; app_usbd_class_next_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_next_get
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_buffer_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>app_usbd_prepare_string</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, app_usbd_string_desc.o(i.app_usbd_prepare_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_usbd_prepare_string &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_string_desc_get
</UL>

<P><STRONG><a name="[91]"></a>cmd_app_size</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cli_utils_cmds.o(i.cmd_app_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cmd_app_size &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>cmd_error</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = cmd_error &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>cmd_log_msg_error</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cli_utils_cmds.o(i.cmd_log_msg_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = cmd_log_msg_error &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>cmd_log_msg_warning</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cli_utils_cmds.o(i.cmd_log_msg_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = cmd_log_msg_warning &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>cmd_reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = cmd_reset &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>nrf_cli_help_requested</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cli_utils_cmds.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
</UL>

<P><STRONG><a name="[1e9]"></a>evt_disable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = evt_disable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
</UL>

<P><STRONG><a name="[1ed]"></a>evt_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = evt_enable &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
</UL>

<P><STRONG><a name="[1eb]"></a>evt_pending</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = evt_pending &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
</UL>

<P><STRONG><a name="[1ec]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>

<P><STRONG><a name="[1f2]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[1e2]"></a>delete_execute</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2df]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[209]"></a>event_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[227]"></a>gc_execute</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[229]"></a>gc_next_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[22c]"></a>gc_page_erase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[22b]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[22a]"></a>gc_record_find_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[228]"></a>gc_state_advance</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[232]"></a>gc_swap_pages</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[2d6]"></a>header_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[2d7]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[238]"></a>init_execute</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2e1]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[2d8]"></a>page_identify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[300]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2d5]"></a>page_scan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[22d]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[22e]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[20b]"></a>pages_init</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[20c]"></a>queue_buf_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[20d]"></a>queue_buf_store</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[225]"></a>queue_process</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[20e]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1e5]"></a>record_find</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[1e3]"></a>record_find_by_desc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[231]"></a>record_find_next</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[1e4]"></a>record_header_flag_dirty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[213]"></a>write_enqueue</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[2de]"></a>write_execute</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2ff]"></a>write_space_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2fe]"></a>write_space_reserve</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[21f]"></a>fnmatchx</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, fnmatch.o(i.fnmatchx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rangematch
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foldcase
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatchx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatchx
</UL>

<P><STRONG><a name="[220]"></a>foldcase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fnmatch.o(i.foldcase), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rangematch
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatchx
</UL>

<P><STRONG><a name="[222]"></a>rangematch</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fnmatch.o(i.rangematch), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foldcase
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatchx
</UL>

<P><STRONG><a name="[94]"></a>nrf_balloc_status</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, nrf_balloc.o(i.nrf_balloc_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = nrf_balloc_status &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_balloc.o(.constdata)
<LI> nrf_balloc.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>char_backspace</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, nrf_cli.o(i.char_backspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = char_backspace &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[19c]"></a>char_delete</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, nrf_cli.o(i.char_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = char_delete &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[19d]"></a>char_insert</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, nrf_cli.o(i.char_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = char_insert &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[198]"></a>cli_clear_eos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_clear_eos))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cli_clear_eos &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[1c5]"></a>cli_cmd_buffer_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_cli.o(i.cli_cmd_buffer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1a5]"></a>cli_cmd_word_remove</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, nrf_cli.o(i.cli_cmd_word_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = cli_cmd_word_remove &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_line_num_with_buffer_offset_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_col_num_with_buffer_offset_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1a7]"></a>cli_col_num_with_buffer_offset_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_col_num_with_buffer_offset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cli_col_num_with_buffer_offset_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
</UL>

<P><STRONG><a name="[19b]"></a>cli_cursor_restore</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_cursor_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cli_cursor_restore &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[19a]"></a>cli_cursor_save</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_cursor_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cli_cursor_save &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[1a9]"></a>cli_execute</STRONG> (Thumb, 558 bytes, Stack size 144 bytes, nrf_cli.o(i.cli_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = cli_execute &rArr; commands_expand &rArr; command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcard_character_exist
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spaces_trim
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_trim
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1c2]"></a>cli_flag_echo_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_cli.o(i.cli_flag_echo_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1a6]"></a>cli_line_num_with_buffer_offset_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_line_num_with_buffer_offset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cli_line_num_with_buffer_offset_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
</UL>

<P><STRONG><a name="[1b6]"></a>cli_log_entry_process</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, nrf_cli.o(i.cli_log_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = cli_log_entry_process &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_flush
</UL>

<P><STRONG><a name="[1bc]"></a>cli_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf_cli.o(i.cli_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cli_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1bf]"></a>cli_state_collect</STRONG> (Thumb, 870 bytes, Stack size 40 bytes, nrf_cli.o(i.cli_state_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = cli_state_collect &rArr; cli_execute &rArr; commands_expand &rArr; command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_flag_echo_is_set
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_buffer_clear
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
</UL>

<P><STRONG><a name="[1c1]"></a>cli_state_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = cli_state_set &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_buffer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[1a8]"></a>cli_strlen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_cli.o(i.cli_strlen))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcard_character_exist
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spaces_trim
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_print
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_line_num_with_buffer_offset_get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_col_num_with_buffer_offset_get
</UL>

<P><STRONG><a name="[1c6]"></a>cli_tab_handle</STRONG> (Thumb, 764 bytes, Stack size 192 bytes, nrf_cli.o(i.cli_tab_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = cli_tab_handle &rArr; option_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcard_character_exist
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_print
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_completion_candidate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[4c]"></a>cli_transport_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_transport_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cli_transport_evt_handler &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(i.nrf_cli_instance_init)
</UL>
<P><STRONG><a name="[1d7]"></a>cli_write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrf_cli.o(i.cli_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cli_write &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_print_stream
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
</UL>

<P><STRONG><a name="[1b3]"></a>cmd_get</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, nrf_cli.o(i.cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cmd_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[1aa]"></a>cmd_trim</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, nrf_cli.o(i.cmd_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_trim &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[1de]"></a>command_to_tmp_buffer_add</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nrf_cli.o(i.command_to_tmp_buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands_expand
</UL>

<P><STRONG><a name="[1b2]"></a>commands_expand</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, nrf_cli.o(i.commands_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = commands_expand &rArr; command_to_tmp_buffer_add &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnmatch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_to_tmp_buffer_add
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[1cb]"></a>completion_insert</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nrf_cli.o(i.completion_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = completion_insert &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
</UL>

<P><STRONG><a name="[1a2]"></a>cursor_down_move</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_cli.o(i.cursor_down_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cursor_down_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1ae]"></a>cursor_end_position_move</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_end_position_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cursor_end_position_move &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[1c4]"></a>cursor_home_position_move</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_home_position_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cursor_home_position_move &rArr; cursor_up_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[19f]"></a>cursor_in_empty_line</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_in_empty_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cursor_in_empty_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[199]"></a>cursor_left_move</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_cli.o(i.cursor_left_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cursor_left_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[1a0]"></a>cursor_next_line_move</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_cli.o(i.cursor_next_line_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cursor_next_line_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1e1]"></a>cursor_position_get</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, nrf_cli.o(i.cursor_position_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = cursor_position_get &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_read
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
</UL>

<P><STRONG><a name="[1c3]"></a>cursor_position_synchronize</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_position_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cursor_position_synchronize &rArr; cursor_up_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_process
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[19e]"></a>cursor_right_move</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_cli.o(i.cursor_right_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_print
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1a3]"></a>cursor_up_move</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_cli.o(i.cursor_up_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cursor_up_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cmd_word_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[224]"></a>format_offset_string_print</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, nrf_cli.o(i.format_offset_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[1a1]"></a>full_line_cmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_cli.o(i.full_line_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = full_line_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_handle
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_insert
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[1c7]"></a>history_handle</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, nrf_cli.o(i.history_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = history_handle &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
</UL>

<P><STRONG><a name="[233]"></a>history_list_element_add</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_cli.o(i.history_list_element_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = history_list_element_add &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
</UL>

<P><STRONG><a name="[235]"></a>history_list_element_oldest_remove</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nrf_cli.o(i.history_list_element_oldest_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = history_list_element_oldest_remove &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_save
</UL>

<P><STRONG><a name="[1ab]"></a>history_save</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nrf_cli.o(i.history_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = history_save &rArr; history_list_element_oldest_remove &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_oldest_remove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_list_element_add
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[1c9]"></a>is_completion_candidate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_cli.o(i.is_completion_candidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_completion_candidate &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
</UL>

<P><STRONG><a name="[1af]"></a>make_argv</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, nrf_cli.o(i.make_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = make_argv &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[196]"></a>multiline_console_data_check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrf_cli.o(i.multiline_console_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = multiline_console_data_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_synchronize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_home_position_move
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_end_position_move
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_state_collect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_backspace
</UL>

<P><STRONG><a name="[26b]"></a>nrf_cli_build_in_cmd_common_executed</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_build_in_cmd_common_executed))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_on
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_off
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_on
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_off
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
</UL>

<P><STRONG><a name="[a2]"></a>nrf_cli_cmd_clear</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = nrf_cli_cmd_clear &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>nrf_cli_cmd_cli</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_cli))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = nrf_cli_cmd_cli &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>nrf_cli_cmd_colors</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = nrf_cli_cmd_colors &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>nrf_cli_cmd_colors_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nrf_cli_cmd_colors_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>nrf_cli_cmd_colors_on</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nrf_cli_cmd_colors_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>nrf_cli_cmd_echo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = nrf_cli_cmd_echo &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_flag_echo_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>nrf_cli_cmd_echo_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nrf_cli_cmd_echo_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>nrf_cli_cmd_echo_on</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nrf_cli_cmd_echo_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>nrf_cli_cmd_history</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_cli_cmd_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = nrf_cli_cmd_history &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>nrf_cli_cmd_resize</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = nrf_cli_cmd_resize &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>nrf_cli_cmd_resize_default</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_resize_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = nrf_cli_cmd_resize_default &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>nrf_cli_instance_init</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_cli_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_cli_instance_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_init
</UL>

<P><STRONG><a name="[97]"></a>nrf_log_backend_cli_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_cli.o(i.nrf_log_backend_cli_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = nrf_log_backend_cli_flush &rArr; cli_log_entry_process &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>nrf_log_backend_cli_panic_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_log_backend_cli_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_cli_panic_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>nrf_log_backend_cli_put</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_log_backend_cli_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = nrf_log_backend_cli_put &rArr; cli_log_entry_process &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>option_print</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, nrf_cli.o(i.option_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = option_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
</UL>

<P><STRONG><a name="[1ad]"></a>spaces_trim</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_cli.o(i.spaces_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spaces_trim &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[4d]"></a>string_cmp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_cli.o(i.string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = string_cmp &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(i.nrf_cli_instance_init)
</UL>
<P><STRONG><a name="[26e]"></a>terminal_size_get</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrf_cli.o(i.terminal_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = terminal_size_get &rArr; cursor_position_get &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
</UL>

<P><STRONG><a name="[271]"></a>vt100_bgcolor_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_cli.o(i.vt100_bgcolor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vt100_bgcolor_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
</UL>

<P><STRONG><a name="[26f]"></a>vt100_color_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_cli.o(i.vt100_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_start
</UL>

<P><STRONG><a name="[1b1]"></a>wildcard_character_exist</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_cli.o(i.wildcard_character_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wildcard_character_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_tab_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_execute
</UL>

<P><STRONG><a name="[190]"></a>cdc_acm_process_and_prepare_buffer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_cli_cdc_acm.o(i.cdc_acm_process_and_prepare_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cdc_acm_process_and_prepare_buffer &rArr; app_usbd_cdc_acm_read_any &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_rx_size
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read_any
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
</UL>

<P><STRONG><a name="[a6]"></a>cdc_acm_user_ev_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_cli_cdc_acm.o(i.cdc_acm_user_ev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cdc_acm_user_ev_handler &rArr; cdc_acm_process_and_prepare_buffer &rArr; app_usbd_cdc_acm_read_any &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_rx_size
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_process_and_prepare_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>cli_cdc_acm_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_cli_cdc_acm.o(i.cli_cdc_acm_enable))
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>cli_cdc_acm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_cli_cdc_acm.o(i.cli_cdc_acm_init))
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>cli_cdc_acm_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_cli_cdc_acm.o(i.cli_cdc_acm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cli_cdc_acm_read &rArr; nrf_queue_out &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>cli_cdc_acm_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_cli_cdc_acm.o(i.cli_cdc_acm_uninit))
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>cli_cdc_acm_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_cli_cdc_acm.o(i.cli_cdc_acm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cli_cdc_acm_write &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; ep_state_access &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>cli_rtt_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_cli_rtt.o(i.cli_rtt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cli_rtt_enable &rArr; app_timer_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>cli_rtt_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_cli_rtt.o(i.cli_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cli_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>cli_rtt_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_cli_rtt.o(i.cli_rtt_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cli_rtt_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>cli_rtt_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_cli_rtt.o(i.cli_rtt_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cli_rtt_uninit &rArr; app_timer_stop &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>cli_rtt_write</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, nrf_cli_rtt.o(i.cli_rtt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cli_rtt_write &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>timer_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_cli_rtt.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = timer_handler &rArr; app_timer_start &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_HasData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_rtt.o(i.cli_rtt_enable)
</UL>
<P><STRONG><a name="[b3]"></a>cli_uart_enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nrf_cli_uart.o(i.cli_uart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cli_uart_enable &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>cli_uart_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_cli_uart.o(i.cli_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cli_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>cli_uart_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.cli_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cli_uart_read &rArr; nrf_ringbuf_cpy_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>cli_uart_uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.cli_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cli_uart_uninit &rArr; nrf_drv_uart_uninit &rArr; nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>cli_uart_write</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nrf_cli_uart.o(i.cli_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cli_uart_write &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[1cc]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_cli_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_drv_uart_uninit &rArr; nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_uninit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[1ce]"></a>rx_try</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.rx_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rx_try &rArr; nrfx_uarte_rx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[43]"></a>timer_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_cli_uart.o(i.timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx_abort
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(i.cli_uart_enable)
</UL>
<P><STRONG><a name="[44]"></a>uart_event_handler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_event_handler &rArr; rx_try &rArr; nrfx_uarte_rx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_put
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(i.cli_uart_init)
</UL>
<P><STRONG><a name="[188]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_space
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[215]"></a>fill_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.fill_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fill_space &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
</UL>

<P><STRONG><a name="[21b]"></a>float_print</STRONG> (Thumb, 904 bytes, Stack size 152 bytes, nrf_fprintf_format.o(i.float_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_space
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[21e]"></a>int_print</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_print
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[239]"></a>unsigned_print</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[289]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[288]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[ba]"></a>erase</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_fstorage_nvmc.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = erase &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>event_send</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, nrf_fstorage_nvmc.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[b6]"></a>init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_nvmc.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>uninit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_fstorage_nvmc.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_fstorage_nvmc.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_words
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>memobj_op</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = memobj_op &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[2e0]"></a>continous_items_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_queue.o(i.continous_items_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>

<P><STRONG><a name="[2a0]"></a>nrf_queue_next_idx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[be]"></a>nrf_queue_status</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, nrf_queue.o(i.nrf_queue_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = nrf_queue_status &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_queue.o(.constdata)
<LI> nrf_queue.o(.constdata)
</UL>
<P><STRONG><a name="[2a4]"></a>queue_read</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, nrf_queue.o(i.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continous_items_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
</UL>

<P><STRONG><a name="[2a3]"></a>queue_utilization_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[2a1]"></a>queue_write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrf_queue.o(i.queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continous_items_get
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>

<P><STRONG><a name="[2]"></a>cli_tx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_log_backend_flash.o(i.cli_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cli_tx &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>entry_process</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = entry_process &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlog_read_cmd
</UL>

<P><STRONG><a name="[c5]"></a>flashlog_clear_cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_log_backend_flash.o(i.flashlog_clear_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = flashlog_clear_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>flashlog_read_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.flashlog_read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = flashlog_read_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_next_entry_get
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>flashlog_status_cmd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.flashlog_status_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = flashlog_status_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(.constdata)
</UL>
<P><STRONG><a name="[4]"></a>fstorage_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_log_backend_flash.o(i.fstorage_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fstorage_evt_handler &rArr; log_msg_queue_process &rArr; msg_to_buf &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_flash.o(fs_data)
</UL>
<P><STRONG><a name="[226]"></a>log_msg_queue_process</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.log_msg_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_msg_queue_process &rArr; msg_to_buf &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flashlog_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_put
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_panic_set
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_evt_handler
</UL>

<P><STRONG><a name="[252]"></a>message_enqueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf_log_backend_flash.o(i.message_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = message_enqueue &rArr; nrf_queue_push &rArr; nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flashlog_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_put
</UL>

<P><STRONG><a name="[246]"></a>msg_to_buf</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nrf_log_backend_flash.o(i.msg_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = msg_to_buf &rArr; nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate_align_length
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_msg_queue_process
</UL>

<P><STRONG><a name="[294]"></a>queue_element_drop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_log_backend_flash.o(i.queue_element_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = queue_element_drop &rArr; nrf_queue_generic_pop &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flashlog_flush
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_crashlog_flush
</UL>

<P><STRONG><a name="[256]"></a>saturate_align_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_log_backend_flash.o(i.saturate_align_length))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_flash_next_entry_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_to_buf
</UL>

<P><STRONG><a name="[ca]"></a>nrf_log_backend_uart_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>nrf_log_backend_uart_panic_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = nrf_log_backend_uart_panic_set &rArr; uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>nrf_log_backend_uart_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = nrf_log_backend_uart_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>serial_tx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_backend_uart.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = serial_tx &rArr; nrfx_uart_tx &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
</UL>
<P><STRONG><a name="[57]"></a>uart_evt_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.uart_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[297]"></a>uart_init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, nrf_log_backend_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[d1]"></a>backend_name_get</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, nrf_log_frontend.o(i.backend_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = backend_name_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>buf_prealloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1e6]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[248]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[cd]"></a>log_backend_ctrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_backend_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_backend_ctrl &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>log_backend_go</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_backend_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_backend_go &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>log_backend_halt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_backend_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_backend_halt &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>log_backend_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_backend_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_backend_status &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>log_cmd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = log_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>log_cmd_backends_list</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.log_cmd_backends_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = log_cmd_backends_list &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>log_config_load_cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.log_config_load_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = log_config_load_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_load
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>log_config_store_cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.log_config_store_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = log_config_store_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_config_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>log_ctrl</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.log_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_ctrl &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_ctrl)
</UL>
<P><STRONG><a name="[47]"></a>log_go</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_go))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_go)
</UL>
<P><STRONG><a name="[48]"></a>log_halt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_halt))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_halt)
</UL>
<P><STRONG><a name="[d4]"></a>log_self_ctrl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.log_self_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = log_self_ctrl &rArr; log_ctrl &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>log_self_go</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_self_go))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>log_self_halt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_self_halt))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>log_self_status</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.log_self_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = log_self_status &rArr; log_status &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>log_skip</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = log_skip &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[49]"></a>log_status</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.log_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = log_status &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_status)
</UL>
<P><STRONG><a name="[243]"></a>module_id_filter_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_id_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = module_id_filter_set &rArr; nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_set
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[255]"></a>module_idx_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>

<P><STRONG><a name="[cb]"></a>module_name_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = module_name_get &rArr; nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>nrf_cli_backend_cmd_execute</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_cli_backend_cmd_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_status
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_halt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_go
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_ctrl
</UL>

<P><STRONG><a name="[240]"></a>nrf_cli_help_requested</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[cc]"></a>severity_lvl_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.severity_lvl_get))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[299]"></a>std_n</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_pending_hook
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>

<P><STRONG><a name="[29b]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[29a]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = prefix_process &rArr; timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[2dd]"></a>timestamp_print</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = timestamp_print &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; float_print &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[102]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
</UL>

<P><STRONG><a name="[10a]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[10c]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[10b]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[113]"></a>_printf_core</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$2
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf2.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(i.__0sprintf$2)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
